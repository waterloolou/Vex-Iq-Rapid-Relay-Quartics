#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
brain_inertial = Inertial()
left_motor = Motor(Ports.PORT9, False)
right_motor = Motor(Ports.PORT3, True)
touchled_2 = Touchled(Ports.PORT2)



# generating and setting random seed
def initializeRandomSeed():
    wait(100, MSEC)
    xaxis = brain_inertial.acceleration(XAXIS) * 1000
    yaxis = brain_inertial.acceleration(YAXIS) * 1000
    zaxis = brain_inertial.acceleration(ZAXIS) * 1000
    systemTime = brain.timer.system() * 100
    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) 
    
# Initialize random seed 
initializeRandomSeed()

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:      VEXcode Project
# 	Author:       VEX
# 	Created:
# 	Description:  VEXcode IQ Python Project
# 
# ------------------------------------------

# Library imports
from vex import *
'''
Begin project code
We take in the parameters of speed for how fast we want to go.
kp, ki, and kd are values that affect the output (how it turns)
The target heading tells us where we want to go.
kp is the rate of change that the robot moves.
ki takes the past error adds it up, and is used to change the rate of change
kd uses that past to predicte future outcomes, and changes the rate of change
We  use print statements and led for debuging all throughout the code. This helps us tune the code to work.
'''
def turn_PID(speed:float, kp:float, ki:float, kd:float, target_heading:int):
    # Setting the rotation and position to 0 as a starting point
    # Setting the motors to brake so that they don't drift. 
    brain_inertial.set_rotation(0, DEGREES)
    left_motor.set_stopping(BRAKE)
    right_motor.set_stopping(BRAKE)
    left_motor.set_position(0, DEGREES)
    right_motor.set_position(0, DEGREES)
    # Calculating error total for ki
    error_total = target_heading - brain_inertial.rotation()
    # Print statements and led for debuging
    print("error_total", error_total)
    touchled_2.set_color(Color.RED)
    # Setting the error for a starting value.
    error = target_heading - brain_inertial.rotation()
    # Loop that moves robot until there is no error
    while math.fabs(error) > 0.75:
        touchled_2.set_color(Color.GREEN)
        # abs_error and last_error are used for calculating derivitive
        abs_error = math.fabs(error)
        print("abs_error", abs_error)
        last_error = abs_error
        print("last_error", last_error)
        # Wating 10 milliseconds to wait for a new reading of error
        wait(10, MSEC)
        touchled_2.set_color(Color.BLUE)
        # derivative gets calculated using the last_error and the abs_error. kd will be multiplied by the derivative.
        error = target_heading - brain_inertial.rotation()
        print("error", error)
        abs_error = math.fabs(error)
        print("abs_error", abs_error)
        derivative = abs_error - last_error
        print("derivative", derivative)
        # + 0.5
        touchled_2.set_color(Color.YELLOW)
        # Output being calculated. Output is used to calculate which direction we need to go to make the turn at any given moment.
        output = abs_error * kp + derivative * kd + (error_total * ki)
        print("output", output)
        # This makes sure that the output never gets to slow, and that the robot will keep moving when the output is to little.
        if (output < 5):
            output = 5
        #move(speed - output, speed + output)
        # If the error is greater than 0, then we turn the robot clockwise.
        if error > 0:  
            print("Positive")
            touchled_2.set_color(Color.GREEN)  
            left_motor.set_velocity(output)
            right_motor.set_velocity(output)
            left_motor.spin(FORWARD)
            right_motor.spin(REVERSE)
        # If the error is less than 0, then we turn the robot counterclockwise
        else:

            print("Negative")  
            touchled_2.set_color(Color.RED)
            left_motor.set_velocity(output)
            right_motor.set_velocity(output)
            left_motor.spin(REVERSE)
            right_motor.spin(FORWARD)
        # Adding the error to get error_total, which is used for calculating output
        error = target_heading - brain_inertial.rotation()
        abs_error = math.fabs(error)
        error_total = error_total + abs_error
    print("last error: " + str(error))
    # Once the while loop has been exited, meaning the turn is complete, we stop the motors
    left_motor.stop()
    right_motor.stop()




# We calculate how long it takes for the turn to be completed
time1 = brain.timer.time()
# We have tunned kp, ki, and kd to make accurate turns.
# This code makes a 90 degree turn
turn_PID(100, 0.75, 0.0001, 0.0001, 90)
time2 = brain.timer.time()
print("time: " + str(time2 -time1))

