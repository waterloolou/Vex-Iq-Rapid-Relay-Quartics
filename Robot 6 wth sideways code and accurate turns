#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
brain_inertial = Inertial()
left_motor = Motor(Ports.PORT7, False)
right_motor = Motor(Ports.PORT1, True)
catapult_motor_a = Motor(Ports.PORT12, False)
catapult_motor_b = Motor(Ports.PORT6, True)
catapult = MotorGroup(catapult_motor_a, catapult_motor_b)
intake_pto_outake_motor_a = Motor(Ports.PORT5, False)
intake_pto_outake_motor_b = Motor(Ports.PORT11, True)
intake_pto_outake = MotorGroup(intake_pto_outake_motor_a, intake_pto_outake_motor_b)
touchled_2 = Touchled(Ports.PORT2)
distance_9 = Distance(Ports.PORT9)
distance_10 = Distance(Ports.PORT10)



# generating and setting random seed
def initializeRandomSeed():
    wait(100, MSEC)
    xaxis = brain_inertial.acceleration(XAXIS) * 1000
    yaxis = brain_inertial.acceleration(YAXIS) * 1000
    zaxis = brain_inertial.acceleration(ZAXIS) * 1000
    systemTime = brain.timer.system() * 100
    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) 
    
# Initialize random seed 
initializeRandomSeed()

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:      VEXcode Project
# 	Author:       VEX
# 	Created:
# 	Description:  VEXcode IQ Python Project
# 
# ------------------------------------------

# Library imports
from vex import *


        

# register for intake_pto_outake and catapult events
start_intake_pto_outake = Event()
stop_intake_pto_outake = Event()
catapult_load = Event()
catapult_launch = Event()
high_low = Event()

# code for making left and right motors as drive train so they move together
def move(left_speed, right_speed):
   left_motor.set_velocity(left_speed, PERCENT)
   right_motor.set_velocity(right_speed, PERCENT)
   left_motor.spin(FORWARD)
   right_motor.spin(FORWARD)
   
   
def move1(left_speed, right_speed):
   left_motor.set_velocity(left_speed, PERCENT)
   right_motor.set_velocity(right_speed, PERCENT)
   left_motor.spin(FORWARD)
   right_motor.spin(FORWARD)
   left_motor.stop()
   right_motor.stop()

def move2(left_speed, right_speed):
   left_motor.set_velocity(left_speed, PERCENT)
   right_motor.set_velocity(right_speed, PERCENT)
   left_motor.spin(REVERSE)
   right_motor.spin(REVERSE)
   left_motor.stop()
   right_motor.stop()

def drivestraitforward_PID(target_distance:int, speed:int, kp:float, ki:float, kd:float, target_heading:int):   
   #brain_inertial.set_rotation(0, DEGREES)
   left_motor.set_position(0, DEGREES)
   right_motor.set_position(0, DEGREES)

   #print("Starting heading forward: ", brain_inertial.rotation())

   # based on the current heading find the change in heading needed to achieve target heading
   startdistance = distance_9.object_distance(MM)   
   distance_moved = distance_9.object_distance(MM) - startdistance

   # error_total is used for K(I)
   error_total = brain_inertial.rotation() - target_heading
   #print("Start Error total: ", error_total)
    
   while (math.fabs(left_motor.position(DEGREES)) + math.fabs(right_motor.position(DEGREES))) / 2 < target_distance and distance_moved < target_distance:       
       distance_moved = distance_9.object_distance(MM) - startdistance
       #print("Distance moved forward:", distance_moved)
       #print("Distance moved forward:", distance_moved)
       error = brain_inertial.rotation() - target_heading
       last_error = error
       wait(1, MSEC)
       error = brain_inertial.rotation() - target_heading       
       # error_total is used for K(D)
       derivative = error - last_error

       # caculate velocity offset based on k(P), K(I) and K(D)
       output = error * kp + derivative * kd + (error_total * ki)
       #print("Output Forward: ", output)

       move(speed - output, speed + output)
       error_total = error_total + error

   left_motor.stop()
   right_motor.stop()
   #print("Ending heading forward: ", brain_inertial.rotation())
   #print("End Error total: ", error_total)
   #print("Distance moved: ", distance_moved)   

def drivestraitbackward_PID(target_distance:int, speed:int, kp:float, ki:float, kd:float, target_heading:int):   
   #brain_inertial.set_rotation(0, DEGREES)
   left_motor.set_position(0, DEGREES)
   right_motor.set_position(0, DEGREES)
   #print("Starting heading backward: ", brain_inertial.rotation())

   # based on the current heading find the change in heading needed to achieve target heading
   startdistance = distance_9.object_distance(MM)   
   distance_moved = math.fabs(distance_9.object_distance(MM) - startdistance)

   # error_total is used for K(I)
   error_total = brain_inertial.rotation() - target_heading
   #print("Start Error total: ", error_total)
   startdistance = distance_9.object_distance(MM)   
   distance_moved =  startdistance - distance_9.object_distance(MM)
   print("Start distance for backward ",startdistance)

   while (distance_9.object_distance(MM) > 30 and (math.fabs(left_motor.position(DEGREES)) + math.fabs(right_motor.position(DEGREES))) / 2 < target_distance): #or distance_moved < target_distance:
       distance_moved = startdistance - distance_9.object_distance(MM)
       #print("Distance moved backward: ", distance_moved)
    
       #print("Distance from goal: ", distance_9.object_distance(MM))

       error = brain_inertial.rotation() - target_heading
       last_error = error
       wait(1, MSEC)
       error = brain_inertial.rotation() - target_heading
       # error_total is used for K(D)
       derivative = error - last_error

       # caculate velocity offset based on k(P), K(I) and K(D)
       output = error * kp + derivative * kd + (error_total * ki)

       #print("Output Backwards: ", output)
       move(speed - output, speed + output)
       error_total = error_total + error

   left_motor.stop()
   right_motor.stop()
   print("Ending heading backward: ", brain_inertial.rotation())
   #print("End Error total: ", error_total)
   #print("Distance moved: ", distance_moved)   

'''
We take in the parameters of speed for how fast we want to go.
kp, ki, and kd are values that affect the output (how it turns)
The target heading tells us where we want to go.
kp is the rate of change that the robot moves.
ki takes the past error adds it up, and is used to change the rate of change
kd uses that past to predicte future outcomes, and changes the rate of change
We  use print statements and led for debuging all throughout the code. This helps us tune the code to work.
'''
def turn_PID(speed:float, kp:float, ki:float, kd:float, target_heading:int):
   # Setting the rotation and position to 0 as a starting point
   # Setting the motors to brake so that they don't drift. 
   #brain_inertial.set_rotation(0, DEGREES)   
   left_motor.set_position(0, DEGREES)
   right_motor.set_position(0, DEGREES)
   print("Starting heading turn: ", brain_inertial.rotation())

   # Calculating error total for ki
   error_total = target_heading - brain_inertial.rotation()
   # Print statements and led for debuging
  # print("error_total", error_total)
   touchled_2.set_color(Color.RED)

   # Setting the error for a starting value.
   error = target_heading - brain_inertial.rotation()
   derivative = 0
   
   no_error_count = 0
   # Loop that moves robot until there is no error
   while math.fabs(error) > 0.75 and no_error_count <= 5:       
       touchled_2.set_color(Color.GREEN)
       # abs_error and last_error are used for calculating derivitive
       last_error = math.fabs(error)
       #print("last_error", last_error)

       # Wating 10 milliseconds to wait for a new reading of error
       wait(5, MSEC)
       touchled_2.set_color(Color.BLUE)

       # derivative gets calculated using the last_error and the abs_error. kd will be multiplied by the derivative.
       error = target_heading - brain_inertial.rotation()
       print("error", error)
       abs_error = math.fabs(error)
       #print("abs_error", abs_error)

       derivative = abs_error - last_error

       touchled_2.set_color(Color.YELLOW)
       # Output being calculated. Output is used to calculate which direction we need to go to make the turn at any given moment.
       output = abs_error * kp + derivative * kd + (error_total * ki)
       #print("output", output)

       # This makes sure that the output never gets to slow, and that the robot will keep moving when the output is to little.
       if (output < 5):
           output = 5
       
       # If the error is greater than 0, then we turn the robot clockwise.
       if error > 0:  
           #print("Positive")
           touchled_2.set_color(Color.GREEN)  
           left_motor.set_velocity(output)
           right_motor.set_velocity(output)
           left_motor.spin(FORWARD)
           right_motor.spin(REVERSE)
       # If the error is less than 0, then we turn the robot counterclockwise
       else:
           #print("Negative")  
           touchled_2.set_color(Color.RED)
           left_motor.set_velocity(output)
           right_motor.set_velocity(output)
           left_motor.spin(REVERSE)
           right_motor.spin(FORWARD)
       # Adding the error to get error_total, which is used for calculating output
       error = target_heading - brain_inertial.rotation()
       abs_error = math.fabs(error)
       error_total = error_total + abs_error

       if math.fabs(error) <= 0.75:
           no_error_count += 1
       else:
           no_error_count = 0
       print("no_error_count: ", no_error_count)
   
   # Once the while loop has been exited, meaning the turn is complete, we stop the motors
   left_motor.stop()
   right_motor.stop()

   print("End error: " + str(error))
   print("Ending heading turn: ", brain_inertial.rotation())




def sideways_correction_forward1():
    left_motor.set_velocity(100, PERCENT)
    right_motor.set_velocity(100, PERCENT)
    left_motor.set_max_torque(100, PERCENT)
    right_motor.set_max_torque(100, PERCENT)
    print("sideways code")
    i = 0
    # forward code for backward code you have to switch the velocities
    while distance_10.object_distance(MM) < 450 or distance_10.object_distance(MM) > 470:
        # you also have to have the pid turn on when it is in the range of the distance sensor, and off when it is not.
        i = i+1
        if distance_10.object_distance(MM) < 450:
            print("if", i)
            move1(55,45)
        elif distance_10.object_distance(MM) > 470:
            print("elif", i)
            move1(45,55)
        
        wait(20, MSEC)


def sideways_correction_backward1():
    left_motor.set_velocity(100, PERCENT)
    right_motor.set_velocity(100, PERCENT)
    left_motor.set_max_torque(100, PERCENT)
    right_motor.set_max_torque(100, PERCENT)
    print("sideways code")
    i = 0
    # forward code for backward code you have to switch the velocities
    while distance_10.object_distance(MM) < 450 or distance_10.object_distance(MM) > 470:
        # you also have to have the pid turn on when it is in the range of the distance sensor, and off when it is not.
        i = i+1
        if distance_10.object_distance(MM) < 450:
            print("if", i)
            move2(-55,-45)
        elif distance_10.object_distance(MM) > 470:
            print("elif", i)
            move2(-45,-55)
        
        wait(20, MSEC)


def sideways_correction_forward2():
    left_motor.set_velocity(100, PERCENT)
    right_motor.set_velocity(100, PERCENT)
    left_motor.set_max_torque(100, PERCENT)
    right_motor.set_max_torque(100, PERCENT)\

    # forward code for backward code you have to switch the velocities
    for repeat_count in range(20):
        if 1016 < distance_10.object_distance(MM) and 1036 > distance_10.object_distance(MM):
            # you also have to have the pid turn on when it is in the range of the distance sensor, and off when it is not.
            move(50,50)
        elif 1036 < distance_10.object_distance(MM):
            move(45,55)
        else:
            move(55,45)
        wait(20, MSEC)


def sideways_correction_backward2():
    left_motor.set_velocity(100, PERCENT)
    right_motor.set_velocity(100, PERCENT)
    left_motor.set_max_torque(100, PERCENT)
    right_motor.set_max_torque(100, PERCENT)\

    # forward code for backward code you have to switch the velocities
    for repeat_count in range(20):
        if 1016 < distance_10.object_distance(MM) and 1036 > distance_10.object_distance(MM):
            # you also have to have the pid turn on when it is in the range of the distance sensor, and off when it is not.
            move(-50,-50)
        elif 1036 < distance_10.object_distance(MM):
            move(-45,-55)
        else:
            move(-55,-45)
        wait(20, MSEC)

















def catapult_launch_degrees(degrees):
   # High goal 100
   catapult.spin_for(REVERSE, degrees, DEGREES)

def catapult_load_degree(degree):
   # Low Goal 300
   catapult.spin_for(FORWARD, degree, DEGREES)

def onevent_catapult_launch_0():
   # Loading for low goal from low goal
   catapult_load_degree(400)


def onevent_catapult_load_0():
   # Loading for Low goal from high goal
   catapult_load_degree(900)


def onevent_high_low_0():
   # Loading for high goal from low goal
   catapult_launch_degrees(1200)

def onevent_start_intake_pto_outake_0():
   # Multithread for starting intake_pto_outake
   intake_pto_outake.spin(FORWARD)

def onevent_stop_intake_pto_outake_0():
   # Multithread for stopping intake_pto_outake
   intake_pto_outake.stop()


def moveandscore():
   kp_backward = 0.4
   kp_forward = 0.45
   ki_backward = 0.001
   ki_forward = 0.001
   kd_backward = 0.001
   kd_forward = 0.001
   #print("heading start: ", brain_inertial.rotation())
   drivestraitbackward_PID(1000, -62.5, kp_backward, ki_backward, kd_backward, -90) #0.456, 0.05664596, 0.45885, 0)
   wait(500,MSEC)
   # Shoot High
   catapult_launch_degrees(100)
   #Loading for Low
   catapult_load.broadcast()

#catapult_load_degree(500)
#wait(1,SECONDS)
#onevent_high_low_0()
#wait(1,SECONDS)
#catapult_launch_degrees(100)

   x=1
   while x < 5:  
       wait(250,MSEC)
       drivestraitforward_PID(635, 62.5, kp_forward, ki_forward, kd_forward, -90)
       start_intake_pto_outake.broadcast()
       #sideways_correction_backward1()
       wait(250,MSEC)
       drivestraitbackward_PID(635, -62.5, kp_backward, ki_backward, kd_backward, -90) #0.456, 0.05664596, 0.45885, 0)
       stop_intake_pto_outake.broadcast()
       wait(250,MSEC)
       catapult_load_degree(500)
       x += 1
       if x < 5:
        catapult_launch.broadcast()
       else:
        high_low.broadcast()
        drivestraitforward_PID(635, 62.5, kp_forward, ki_forward, kd_forward, -90)
        #print("heading end: ", brain_inertial.rotation())
        

# system event handlers
catapult_launch(onevent_catapult_launch_0)
start_intake_pto_outake(onevent_start_intake_pto_outake_0)
catapult_load(onevent_catapult_load_0)
stop_intake_pto_outake(onevent_stop_intake_pto_outake_0)
high_low(onevent_high_low_0)
# add 15ms delay to make sure events are registered correctly.
wait(15, MSEC)




#when_started1()
# We calculate how long it takes for the turn to be completed
#time1 = brain.timer.time()
# We have tunned kp, ki, and kd to make accurate turns.
# This code makes a 90 degree turn
#turn_PID(100, 0.75, 0.0001, 0.0001, 90)
#time2 = brain.timer.time()
#print("time: " + str(time2 -time1))
brain_inertial.calibrate()
while brain_inertial.is_calibrating():
   sleep(50)
brain_inertial.set_rotation(0, DEGREES)
left_motor.set_stopping(BRAKE)
right_motor.set_stopping(BRAKE)
catapult.set_velocity(100, PERCENT)
intake_pto_outake.set_velocity(100, PERCENT)
right_motor.set_timeout(4, SECONDS)
left_motor.set_timeout(4, SECONDS)
touchled_2.set_color(Color.RED)
while not touchled_2.pressing():
        wait(20, MSEC)
touchled_2.set_color(Color.GREEN)
intake_pto_outake.spin(FORWARD)
kp_backward = 0.4
kp_forward = 0.45
ki_backward = 0.001
ki_forward = 0.001
kd_backward = 0.001
kd_forward = 0.001

start_time = brain.timer.time(MSEC)
drivestraitforward_PID(284.5, 62.5, kp_forward, ki_forward,kd_forward , 0)
wait(250,MSEC)
print("Forward code ended. Time taken: " + str(brain.timer.time(MSEC) -start_time))

time1 = brain.timer.time(MSEC)
turn_PID(100, 1, 0.001, 0.001, -90)
wait(125,MSEC)
print("Turn code ended. Time taken: " + str(brain.timer.time(MSEC) -time1))

time1 = brain.timer.time(MSEC)
moveandscore()
print("Move and score code ended. Time taken: " + str(brain.timer.time(MSEC) -time1))
wait(125,MSEC)

time1 = brain.timer.time(MSEC)
turn_PID(100, 1, 0.001, 0.001, 25)
print("Turn code 2 ended. Time taken: " + str(brain.timer.time(MSEC) -time1))
wait(125,MSEC)
start_intake_pto_outake.broadcast()
#high_low.broadcast()
time1 = brain.timer.time(MSEC)
drivestraitforward_PID(586, 62.5, kp_backward, ki_backward, kd_backward, 25)
print("Backward Transition 1 ended. Time taken: " + str(brain.timer.time(MSEC) -time1))
wait(125,MSEC)

time1 = brain.timer.time(MSEC)
turn_PID(100, 1, 0.001, 0.001, -90)
print("Total time taken: " + str(brain.timer.time(MSEC) -start_time))
print("Turn code 3 ended. Time taken: " + str(brain.timer.time(MSEC) -time1))
wait(125,MSEC)

#time1 = brain.timer.time(MSEC)
#drivestraitforward_PID(318.5, 62.5, kp_forward, ki_forward,kd_forward , -90)
#print("Pick up ball. Time taken: " + str(brain.timer.time(MSEC) -time1))
#wait(500,MSEC)

time1 = brain.timer.time(MSEC)
drivestraitbackward_PID(1000, -62.5, kp_backward, ki_backward, kd_backward, -90)
print("Shoot ball. Time taken: " + str(brain.timer.time(MSEC) -time1))
wait(500,MSEC)


time1 = brain.timer.time(MSEC)
drivestraitbackward_PID(784, -62.5, kp_backward, ki_backward, kd_backward, -90)
catapult_launch_degrees(100)
print("Shoot ball. Time taken: " + str(brain.timer.time(MSEC) -time1))
wait(125,MSEC)


time1 = brain.timer.time(MSEC)
moveandscore()
print("Trials 2 ended. Time taken: " + str(brain.timer.time(MSEC) -time1))

print("Path ended. Time taken: " + str(brain.timer.time(MSEC) - start_time))


