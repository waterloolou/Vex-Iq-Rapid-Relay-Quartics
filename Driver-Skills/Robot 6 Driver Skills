#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
brain_inertial = Inertial()
controller = Controller()
left_drive_smart = Motor(Ports.PORT7, 0.5, False)
right_drive_smart = Motor(Ports.PORT1, 0.5, True)

drivetrain = SmartDrive(left_drive_smart, right_drive_smart, brain_inertial, 200)
catpult_motor_a = Motor(Ports.PORT12, False)
catpult_motor_b = Motor(Ports.PORT6, True)
catpult = MotorGroup(catpult_motor_a, catpult_motor_b)
pneumatic_10 = Pneumatic(Ports.PORT10)
intake_pto_outake_motor_a = Motor(Ports.PORT5, False)
intake_pto_outake_motor_b = Motor(Ports.PORT11, True)
intake_pto_outake = MotorGroup(intake_pto_outake_motor_a, intake_pto_outake_motor_b)



# generating and setting random seed
def initializeRandomSeed():
    wait(100, MSEC)
    xaxis = brain_inertial.acceleration(XAXIS) * 1000
    yaxis = brain_inertial.acceleration(YAXIS) * 1000
    zaxis = brain_inertial.acceleration(ZAXIS) * 1000
    systemTime = brain.timer.system() * 100
    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) 
    
# Initialize random seed 
initializeRandomSeed()

vexcode_initial_drivetrain_calibration_completed = False
def calibrate_drivetrain():
    # Calibrate the Drivetrain Inertial
    global vexcode_initial_drivetrain_calibration_completed
    if not vexcode_initial_drivetrain_calibration_completed:
        pneumatic_10.pump_off()
    sleep(200, MSEC)
    brain.screen.print("Calibrating")
    brain.screen.next_row()
    brain.screen.print("Inertial")
    brain_inertial.calibrate()
    while brain_inertial.is_calibrating():
        sleep(25, MSEC)
    if not vexcode_initial_drivetrain_calibration_completed:
        pneumatic_10.pump_on()
    vexcode_initial_drivetrain_calibration_completed = True
    brain.screen.clear_screen()
    brain.screen.set_cursor(1, 1)


# Calibrate the Drivetrain
calibrate_drivetrain()



# define variables used for controlling motors based on controller inputs
controller_left_shoulder_control_motors_stopped = True
controller_right_shoulder_control_motors_stopped = True
drivetrain_l_needs_to_be_stopped_controller = False
drivetrain_r_needs_to_be_stopped_controller = False

# define a task that will handle monitoring inputs from controller
def rc_auto_loop_function_controller():
    global drivetrain_l_needs_to_be_stopped_controller, drivetrain_r_needs_to_be_stopped_controller, controller_left_shoulder_control_motors_stopped, controller_right_shoulder_control_motors_stopped, remote_control_code_enabled
    # process the controller input every 20 milliseconds
    # update the motors based on the input values
    while True:
        if remote_control_code_enabled:
            
            # calculate the drivetrain motor velocities from the controller joystick axies
            # left = axisA + axisC
            # right = axisA - axisC
            drivetrain_left_side_speed = controller.axisA.position() + controller.axisC.position()
            drivetrain_right_side_speed = controller.axisA.position() - controller.axisC.position()
            
            # check if the value is inside of the deadband range
            if drivetrain_left_side_speed < 5 and drivetrain_left_side_speed > -5:
                # check if the left motor has already been stopped
                if drivetrain_l_needs_to_be_stopped_controller:
                    # stop the left drive motor
                    left_drive_smart.stop()
                    # tell the code that the left motor has been stopped
                    drivetrain_l_needs_to_be_stopped_controller = False
            else:
                # reset the toggle so that the deadband code knows to stop the left motor next
                # time the input is in the deadband range
                drivetrain_l_needs_to_be_stopped_controller = True
            # check if the value is inside of the deadband range
            if drivetrain_right_side_speed < 5 and drivetrain_right_side_speed > -5:
                # check if the right motor has already been stopped
                if drivetrain_r_needs_to_be_stopped_controller:
                    # stop the right drive motor
                    right_drive_smart.stop()
                    # tell the code that the right motor has been stopped
                    drivetrain_r_needs_to_be_stopped_controller = False
            else:
                # reset the toggle so that the deadband code knows to stop the right motor next
                # time the input is in the deadband range
                drivetrain_r_needs_to_be_stopped_controller = True
            
            # only tell the left drive motor to spin if the values are not in the deadband range
            if drivetrain_l_needs_to_be_stopped_controller:
                left_drive_smart.set_velocity(drivetrain_left_side_speed, PERCENT)
                left_drive_smart.spin(FORWARD)
            # only tell the right drive motor to spin if the values are not in the deadband range
            if drivetrain_r_needs_to_be_stopped_controller:
                right_drive_smart.set_velocity(drivetrain_right_side_speed, PERCENT)
                right_drive_smart.spin(FORWARD)
            # check the buttonLUp/buttonLDown status
            # to control intake_pto_outake
            if controller.buttonLUp.pressing():
                intake_pto_outake.spin(FORWARD)
                controller_left_shoulder_control_motors_stopped = False
            elif controller.buttonLDown.pressing():
                intake_pto_outake.spin(REVERSE)
                controller_left_shoulder_control_motors_stopped = False
            elif not controller_left_shoulder_control_motors_stopped:
                intake_pto_outake.stop()
                # set the toggle so that we don't constantly tell the motor to stop when
                # the buttons are released
                controller_left_shoulder_control_motors_stopped = True
            # check the buttonRUp/buttonRDown status
            # to control catpult
            if controller.buttonRUp.pressing():
                catpult.spin(FORWARD)
                controller_right_shoulder_control_motors_stopped = False
            elif controller.buttonRDown.pressing():
                catpult.spin(REVERSE)
                controller_right_shoulder_control_motors_stopped = False
            elif not controller_right_shoulder_control_motors_stopped:
                catpult.stop()
                # set the toggle so that we don't constantly tell the motor to stop when
                # the buttons are released
                controller_right_shoulder_control_motors_stopped = True
        # wait before repeating the process
        wait(20, MSEC)

# define variable for remote controller enable/disable
remote_control_code_enabled = True

rc_auto_loop_thread_controller = Thread(rc_auto_loop_function_controller)

#endregion VEXcode Generated Robot Configuration

myVariable = 0
x = brain.timer.time(SECONDS)
def when_started1():
    
    pneumatic_10.pump_on()
    brain.screen.print("Pump started")

    left_drive_smart.set_velocity(100, PERCENT)
    right_drive_smart.set_velocity(100, PERCENT)
    #drivetrain.set_drive_velocity(100, PERCENT)
    drivetrain.set_turn_velocity(75, PERCENT)
    drivetrain.set_stopping(BRAKE)
    catpult.set_stopping(BRAKE)
    catpult.set_velocity(100, PERCENT)
    intake_pto_outake.set_velocity(100, PERCENT)
    intake_pto_outake.set_stopping(BRAKE)
    

    while True:
        if controller.buttonEUp.pressing():
            pneumatic_10.extend(CYLINDER2)
        if controller.buttonEDown.pressing():
            pneumatic_10.retract(CYLINDER2)
        
        y = brain.timer.time(SECONDS)
        


when_started1()
