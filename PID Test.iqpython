#region VEXcode Generated Robot Configuration
from vex import *
import urandom

# Brain should be defined by default
brain=Brain()

# Robot configuration code
brain_inertial = Inertial()
left_motor = Motor(Ports.PORT9, False)
right_motor = Motor(Ports.PORT3, True)



# generating and setting random seed
def initializeRandomSeed():
    wait(100, MSEC)
    xaxis = brain_inertial.acceleration(XAXIS) * 1000
    yaxis = brain_inertial.acceleration(YAXIS) * 1000
    zaxis = brain_inertial.acceleration(ZAXIS) * 1000
    systemTime = brain.timer.system() * 100
    urandom.seed(int(xaxis + yaxis + zaxis + systemTime)) 
    
# Initialize random seed 
initializeRandomSeed()

#endregion VEXcode Generated Robot Configuration

# ------------------------------------------
# 
# 	Project:      PID Test Control
# 	Author:       Louis Cottenier
# 	Created:      11/9/2024
# 	Description:  Testing PID control
# 
# ------------------------------------------

# Library imports
from vex import *

# Begin project code
start_intake = Event()
stop_intake = Event()
catapult_load = Event()
catapult_launch = Event()
error = 0
output = 0
error_total = 0
last_error = 0
derivative = 0
gear_ratio = 2 / 1


def move(left_speed, right_speed):
    left_motor.set_velocity(left_speed, PERCENT)
    right_motor.set_velocity(right_speed, PERCENT)
    left_motor.spin(FORWARD)
    right_motor.spin(FORWARD)


#(gear_ratio * 200)
#target distance is in MM
#speed is NOT velocity, speed affects velocity
#stuff is not workign and i am tired and broken :(
def drivestrait_PID(target_distance:int, speed:int, kp:float, kd:float, ki:float, target_heading:int):
    brain_inertial.set_rotation(0, DEGREES)
    left_motor.set_stopping(BRAKE)
    right_motor.set_stopping(BRAKE)
    left_motor.set_position(0, DEGREES)
    right_motor.set_position(0, DEGREES)
    error_total = brain_inertial.rotation() - target_heading
    while math.fabs(left_motor.position(DEGREES)) + math.fabs(right_motor.position(DEGREES)) / 2 < target_distance:
        error = brain_inertial.rotation() - target_heading
        last_error = error
        wait(20, MSEC)
        error = brain_inertial.rotation() - target_heading
        derivative = error - last_error
        # + 0.5
        output = error * kp + derivative * kd + (error_total * ki)
        move(speed - output, speed + output)
        error_total = error_total + error
    left_motor.stop()
    right_motor.stop()



drivestrait_PID(1800, 75, 1, 0.1, 0.1, 0)

